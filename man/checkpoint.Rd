% Generated by roxygen2 (4.0.1): do not edit by hand
\name{checkpoint}
\alias{checkpoint}
\title{Set MRAN checkpoint and create local project package library.}
\usage{
checkpoint(snapshotdate = NULL, repo = getwd(), autosnap = "last",
  verbose = TRUE)
}
\arguments{
\item{snapshotdate}{(date) Required. Date of snapshot to use. E.g. "2014-06-20". If left blank, you will be supplied with options.}

\item{repo}{A repository path. This is the path to the root of your RRT repository. Defaults to current working directory current working directory via \code{\link{getwd}}.}

\item{autosnap}{One of first, last or all. Determines how to resolve the snapshot id for a given date, if more than one snapshot exists on MRAN for that date.}

\item{verbose}{(logical) Whether to print messages or not (Default: TRUE).}
}
\value{
Files written to the user's machine, with informative messages on progress
}
\description{
This function decides what to do with your repository based on commands you give, and on skimming through your repo. You can run this function to start a new repository, without any work done yet, creating a new folder and RRT files, or you can initiate a RRT repository inside an existing project/folder you already have. If the latter, we don't alter your files at all, but simply write a few files needed for RRT to work properly.
}
\details{
By detault initialization is done interactively, so that you can choose your settings or accept reasonable defaults.

You can run this function to start a new RRT repo, and to refresh a repo with new work. This function downloads packages and installs them, as needed.
}
\examples{
# tests for initialize

repo_root <- file.path(tempdir(), "rrttemp")

snap_date <- "2014-09-08"

checkpoint(snap_date, repo = repo_root)
repoScanPackages(repo_root)
repoInstalledPackages(repo_root)

# Write dummy code file to repo
cat("library(MASS)", "library(XML)", 
    sep="\\n", 
    file = file.path(repo_root, "code.R")
)


checkpoint(snap_date, repo = repo_root)
repoScanPackages(repo_root)
repoInstalledPackages(repo_root)

# cleanup
unlink(repo_root, recursive=TRUE)

}

